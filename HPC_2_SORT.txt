#include<iostream>
#include<vector>
#include<omp.h>
//#include<chrono>
using namespace std;

void bubblesort(vector<int>v)
{
	int n = v.size();
	
	#pragma omp parallel
	for(int i=0; i<n-1; i++)
	{
		#pragma omp parallel for
		for(int j=0; j<n-i-1; j++)
		{
			if(v[j]> v[j+1])
				swap(v[j], v[j+1]);
		}
	}
	
	cout<<"Sorted array : ";
	for(int i=0; i<n; i++)
		cout<<v[i]<<" ";
	
}

void bubblesort_2(vector<int>v)
{
	int n = v.size();
	
	for(int i=0; i<n; i++)
	{
		int first = i %2;
		#pragma omp parallel for shared(v, first)
		for(int j=first; j<n-1; j+=2)
		{
			if(v[j]> v[j+1])
				swap(v[j], v[j+1]);
		}
	}
	
	cout<<"Sorted array : ";
	for(int i=0; i<n; i++)
		cout<<v[i]<<" ";
	
}

void merge(vector<int>v, int left, int mid, int right)
{
	int n1 = mid-left+1;
	int n2 = right-mid;
	
	vector<int>L(n1), R(n2);
	
	for(int i=0; i<n1; i++)
		L[i]= v[left+i];
	
	for(int j=0; j<n2; j++)
		R[j] = v[mid+j+1];
		
	int i=0, j=0, k = left;
	
	while(i<n1 && j<n2)
	{
		if(L[i]>=R[j])
		{
			v[k] = R[j];
			++j;
		}
		else
			v[k] = L[i];
			++i;
		
		k++;
	}
	while(i<n1)
	{
		v[k] = L[i];
		i++;
		k++;
	}
	while(j<n2)
	{
		v[k] = R[j];
		j++;
		k++;
	}
}

void mergesort(vector<int>v, int left, int right)
{
	if(left<right)
	{
	
		int mid = left+(right-left)/2;
	
	#pragma omp parallel sections
	{
		#pragma omp section
		mergesort(v, left, mid);
		
		#pragma omp section
		mergesort(v, mid+1, right);
	}
	merge(v, left, mid, right);
	}
}

int main()
{
	int n;
	cin>>n;
	
	vector<int>v;
	
	int a;
	for(int i=0; i<n; i++)
	{
		cin>>a;
		v.push_back(a);
	}
	
	mergesort(v, 0, n-1);
	for(int i=0; i<n; i++)
		cout<<v[i]<<" ";
	
	bubblesort_2(v);
	
}
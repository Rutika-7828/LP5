#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

// Function to find the minimum value in an array
int parallelMin(const vector<int>& arr) {
    int minVal = arr[0];

    #pragma omp parallel for reduction(min:minVal)
    for (int i = 1; i < arr.size(); i++) {
        if (arr[i] < minVal) {
            minVal = arr[i];
        }
    }

    return minVal;
}

// Function to find the maximum value in an array
int parallelMax(const vector<int>& arr) {
    int maxVal = arr[0];

    #pragma omp parallel for reduction(max:maxVal)
    for (int i = 1; i < arr.size(); i++) {
        if (arr[i] > maxVal) {
            maxVal = arr[i];
        }
    }

    return maxVal;
}

// Function to calculate the sum of values in an array
int parallelSum(const vector<int>& arr) {
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < arr.size(); i++) {
        sum += arr[i];
    }

    return sum;
}

// Function to calculate the average of values in an array
double parallelAverage(const vector<int>& arr) {
    int sum = parallelSum(arr);
    double average = static_cast<double>(sum) / arr.size();
    return average;
}

int main() {
    vector<int>arr;
    
    int n;
    cout<<"Enter the size of array : ";
    cin>>n;
    
    int a;
    for(int i=0; i<n; i++)
    {
    	cin>>a;
    	arr.push_back(a);
	}

    cout << "Minimum value: " << parallelMin(arr) << endl;
    cout << "Maximum value: " << parallelMax(arr) << endl;
    cout << "Sum of values: " << parallelSum(arr) << endl;
    cout << "Average of values: " << parallelAverage(arr) << endl;

    return 0;
}

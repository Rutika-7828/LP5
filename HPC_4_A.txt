#include <iostream>
#include <vector>

// CUDA kernel for vector addition
__global__ void vectorAddition(const int* a, const int* b, int* c, int size) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < size) {
        c[tid] = a[tid] + b[tid];
    }
}

int main() {
    int size = 1000000;  // Size of the vectors
    int* a, * b, * c;    // Host vectors
    int* dev_a, * dev_b, * dev_c;  // Device vectors

    // Allocate memory on the host
    a = new int[size];
    b = new int[size];
    c = new int[size];

    // Initialize the vectors with random values
    for (int i = 0; i < size; ++i) {
        a[i] = rand() % 100;
        b[i] = rand() % 100;
    }

    // Allocate memory on the device
    cudaMalloc((void**)&dev_a, size * sizeof(int));
    cudaMalloc((void**)&dev_b, size * sizeof(int));
    cudaMalloc((void**)&dev_c, size * sizeof(int));

    // Copy input vectors from host to device
    cudaMemcpy(dev_a, a, size * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_b, b, size * sizeof(int), cudaMemcpyHostToDevice);

    // Define the grid and block dimensions
    int blockSize = 256;
    int gridSize = (size + blockSize - 1) / blockSize;

    // Launch the kernel
    vectorAddition<<<gridSize, blockSize>>>(dev_a, dev_b, dev_c, size);

    // Copy the result vector from device to host
    cudaMemcpy(c, dev_c, size * sizeof(int), cudaMemcpyDeviceToHost);

    // Print the result
    for (int i = 0; i < 10; ++i) {
        std::cout << a[i] << " + " << b[i] << " = " << c[i] << std::endl;
    }

    // Free device memory
    cudaFree(dev_a);
    cudaFree(dev_b);
    cudaFree(dev_c);

    // Free host memory
    delete[] a;
    delete[] b;
    delete[] c;

    return 0;
}
